#
# pbl f110 ci/cd pipeline
# 
# upon commits on `master` it builds the system in two versions in two docker container, one for the simulator, one for the real car
#   it then tests the simulator
# 
# upon commits on `test` it  

docker-build-base-x86:
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"
  stage: build
  variables:
      DOCKER_TLS_CERTDIR: "/certs"
      GIT_SUBMODULE_STRATEGY: recursive
      GIT_SUBMODULE_FORCE_HTTPS: "true"
  # Use the official docker image.
  image: docker:latest
  services:
    - docker:dind
  before_script:
   - docker login registry.git.ee.ethz.ch -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
  # Default branch leaves tag empty (= latest tag)
  # All other branches are tagged with the escaped branch name (commit ref slug)
  script:
    - docker compose build --pull base_x86
    - docker compose push base_x86
  tags:
    - "build"
    - "x86"

# docker-build-base-arm:
#   rules:
#     - if: $CI_COMMIT_BRANCH == "master"
#     - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"
#   stage: build
#   variables:
#       DOCKER_TLS_CERTDIR: "/certs"
#       GIT_SUBMODULE_STRATEGY: recursive
#       GIT_SUBMODULE_FORCE_HTTPS: "true"
#   # Use the official docker image.
#   image: docker:latest
#   services:
#     - docker:dind
#   before_script:
#    - docker login registry.git.ee.ethz.ch -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
#   # Default branch leaves tag empty (= latest tag)
#   # All other branches are tagged with the escaped branch name (commit ref slug)
#   script:
#     - docker compose build --pull base_arm
#     - docker compose push base_arm
#   tags:
#     - "build"
#     - "arm"

docker-build-nuc:
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"
  stage: build
  variables:
      DOCKER_TLS_CERTDIR: "/certs"
      GIT_SUBMODULE_STRATEGY: recursive
      GIT_SUBMODULE_FORCE_HTTPS: "true"
  # Use the official docker image.
  image: docker:latest
  services:
    - docker:dind
  before_script:
   - docker login registry.git.ee.ethz.ch -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
  # Default branch leaves tag empty (= latest tag)
  # All other branches are tagged with the escaped branch name (commit ref slug)
  script:
    - export USER=$(whoami)
    - export UID=$(id -u)
    - export GID=$(id -g)
    - docker compose build --pull nuc
    - docker compose push nuc
  tags:
    - "build"
    - "x86"

docker-build-sim-x86:
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"
  stage: build
  variables:
      DOCKER_TLS_CERTDIR: "/certs"
      GIT_SUBMODULE_STRATEGY: recursive
      GIT_SUBMODULE_FORCE_HTTPS: "true"
  # Use the official docker image.
  image: docker:latest
  services:
    - docker:dind
  before_script:
   - docker login registry.git.ee.ethz.ch -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
  # Default branch leaves tag empty (= latest tag)
  # All other branches are tagged with the escaped branch name (commit ref slug)
  script:
    - export USER=$(whoami)
    - export UID=$(id -u)
    - export GID=$(id -g)
    - docker compose build --pull sim_x86
    - docker compose push sim_x86
  tags:
    - "build"
    - "x86"

# docker-build-jet:
#   rules:
#     - if: $CI_COMMIT_BRANCH == "master"
#     - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"
#   stage: build
#   variables:
#       DOCKER_TLS_CERTDIR: "/certs"
#       GIT_SUBMODULE_STRATEGY: recursive
#       GIT_SUBMODULE_FORCE_HTTPS: "true"
#   # Use the official docker image.
#   image: docker:latest
#   services:
#     - docker:dind
#   before_script:
#    - docker login registry.git.ee.ethz.ch -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
#   # Default branch leaves tag empty (= latest tag)
#   # All other branches are tagged with the escaped branch name (commit ref slug)
#   script:
#     - export USER=$(whoami)
#     - export UID=$(id -u)
#     - export GID=$(id -g)
#     - docker compose build --pull jet
#     - docker compose push jet
#   tags:
#     - "build"
#     - "arm"

# docker-build-sim-arm:
#   rules:
#     - if: $CI_COMMIT_BRANCH == "master"
#     - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"
#   stage: build
#   variables:
#       DOCKER_TLS_CERTDIR: "/certs"
#       GIT_SUBMODULE_STRATEGY: recursive
#       GIT_SUBMODULE_FORCE_HTTPS: "true"
#   # Use the official docker image.
#   image: docker:latest
#   services:
#     - docker:dind
#   before_script:
#    - docker login registry.git.ee.ethz.ch -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
#   # Default branch leaves tag empty (= latest tag)
#   # All other branches are tagged with the escaped branch name (commit ref slug)
#   script:
#     - export USER=$(whoami)
#     - export UID=$(id -u)
#     - export GID=$(id -g)
#     - docker compose build --pull sim_arm
#     - docker compose push sim_arm
#   tags:
#     - "build"
#     - "arm"

#USE THE LINTER FOR THE OPENSOURCING
#lint-python:
#  stage: test
#  image: python:3.8  
#  script:
#    - pip install pylint
#    - git diff --name-only HEAD^ | grep '\.py$' | xargs -r pylint --disable=C0111,R0903,W0511,R0801,C0301 --fail-under=6.9
#  rules:
#    - if: $CI_COMMIT_BRANCH == "develop"
#    - if: $CI_COMMIT_BRANCH == "master"
#    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
#  tags:
#    - "lint"

test-sim:
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_COMMIT_BRANCH == "master"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  stage: test
  variables:
      DOCKER_TLS_CERTDIR: "/certs"
  # Use the built pbl f110 image
  image: "${CI_REGISTRY_IMAGE}/race_stack_sim_x86"
  script:
    - export USER=$(whoami)
    - cp -rf /builds/pbl/research/f1tenth/race_stack/ /home/${USER}/catkin_ws/src/race_stack/
    - cd /home/${USER}/catkin_ws
    - /bin/bash /home/${USER}/catkin_ws/src/race_stack/.devcontainer/.install_utils/post_installation.sh
    - source /opt/ros/noetic/setup.bash && source /home/${USER}/catkin_ws/devel/setup.bash && catkin test stack_master
    - cp -rf /home/${USER}/catkin_ws/src/race_stack/stack_master/test/artifacts/ ${CI_PROJECT_DIR}/test_artifacts/
  artifacts:
    paths:
      - test_artifacts/*.md
  tags:
    - "test"
