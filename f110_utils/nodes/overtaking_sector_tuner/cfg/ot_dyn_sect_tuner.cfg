#!/usr/bin/env python3

PACKAGE = "overtaking_sector_tuner"
import rospkg
import yaml, os
from dynamic_reconfigure.parameter_generator_catkin import *

ros_path = rospkg.RosPack().get_path('overtaking_sector_tuner')
yaml_path = os.path.join(ros_path, 'cfg/ot_sectors.yaml')
if os.path.isfile(yaml_path):
    with open(yaml_path) as file:
        sector_dict = yaml.load(file, Loader=yaml.FullLoader)

    gen = ParameterGenerator()

    gen.add("yeet_factor",    double_t,    0, "Yeet Factor!", sector_dict['yeet_factor'],  0.5, 3.5)
    gen.add("spline_len",    double_t,    0, "Length of spline", sector_dict['spline_len'],  10, 50)
    gen.add("ot_sector_begin",    double_t,    0, "OT Sector Begin Length [m]", sector_dict['yeet_factor'],  0.1, 1.5)


    sectors = {k: v for k, v in sector_dict.items() if k.startswith('Overtaking_sector')}

    # Generate flags for yes/no overtaking sector
    i=0
    for key, item in sectors.items():
        #name, paramtype, level, description, default, min, max
        gen.add("Overtaking_sector"+ str(i),   bool_t,   1, "Overtake in Sector{}".format(i),  item['ot_flag'])
        i += 1
else:
    gen = ParameterGenerator()

    gen.add("yeet_factor",    double_t,    0, "Yeet Factor!", 0.69,  0.5, 3.5)
    gen.add("spline_len",    double_t,    0, "Length of spline", 42,  10, 50)
    gen.add("ot_sector_begin",    double_t,    0, "OT Sector Begin Length [m]", 0.69,  0.1, 1.5)
    gen.add("Overtaking_sector"+ str(0),   bool_t,   1, "Overtake in Sector0",  False)

exit(gen.generate(PACKAGE, "ot_dynamic_sector", "ot_dyn_sect_tuner"))
