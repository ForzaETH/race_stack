import casadi as ca
import numpy as np


class BattModel:

    __slots__ = ('pars',
                 'temp_batt_n',
                 'temp_batt_s',
                 'temp_batt',
                 'dtemp',
                 'dsoc',
                 'temp_min',
                 'temp_max',
                 'temp_guess',
                 'soc_min',
                 'soc_max',
                 'soc_guess',
                 'soc_batt_n',
                 'soc_batt_s',
                 'soc_batt',
                 'v_dc',
                 'i_batt',
                 'Ri',
                 'f_nlp',
                 'f_sol',
                 'p_loss_total',
                 'p_out_batt',
                 'p_internal_batt',
                 'r_batt_inverse',
                 'p_losses_opt')

    def __init__(self,
                 pwr_pars: dict):
        """
        Python version: 3.5
        Created by: Thomas Herrmann (thomas.herrmann@tum.de)
        Created on: 01.04.2020

        Documentation: Battery class for the optimization of global trajectories for electric race cars implemented in
        the CasADi modeling language.

        Inputs:
        pwr_pars: powertrain parameters defined in the initialization file
        """

        # Store powertrain parameters
        self.pars = pwr_pars

        # --------------------------------------------------------------------------------------------------------------
        # Empty battery states
        # --------------------------------------------------------------------------------------------------------------
        self.temp_batt_n = None
        self.temp_batt_s = None
        self.temp_batt = None
        self.dtemp = None
        self.dsoc = None
        self.temp_min = None
        self.temp_max = None
        self.temp_guess = None
        self.soc_min = None
        self.soc_max = None
        self.soc_guess = None
        self.soc_batt_n = None
        self.soc_batt_s = None
        self.soc_batt = None

        self.v_dc = None
        self.i_batt = None
        self.Ri = None

        self.f_nlp = None
        self.f_sol = None

        self.p_loss_total = None
        self.p_out_batt = None
        self.p_internal_batt = None

        self.r_batt_inverse = None

        # Optimized losses list: p_loss_total, p_loss_effects
        self.p_losses_opt = []

        # Call initialization function
        self.initialize()

    def initialize(self):
        """
        Python version: 3.5
        Created by: Thomas Herrmann
        Created on: 01.04.2020

        Documentation: Initialization of necessary optimization variables (symbolic CasADi expressions)
        and states including limits.
        """

        # battery temperature [°C]
        self.temp_batt_n = ca.SX.sym('temp_batt_n')
        self.temp_batt_s = self.pars["temp_batt_max"] - 10
        self.temp_batt = self.temp_batt_s * self.temp_batt_n

        # Define limits and initial guess
        self.temp_min = self.pars["T_env"] / self.temp_batt_s
        self.temp_max = self.pars["temp_batt_max"] / self.temp_batt_s
        self.temp_guess = self.pars["T_env"] / self.temp_batt_s

        # SOC of battery [-]
        self.soc_batt_n = ca.SX.sym('soc_batt_n')
        self.soc_batt_s = 1
        self.soc_batt = self.soc_batt_s * self.soc_batt_n

        self.soc_min = 0 / self.soc_batt_s
        self.soc_max = 1 / self.soc_batt_s
        self.soc_guess = 0.5

        self.get_thermal_resistance()

        self.ocv_voltage()

    def get_increment(self,
                      sf: ca.SX,
                      temp_cool_b: ca.SX):
        """
        Python version: 3.5
        Created by: Thomas Herrmann
        Created on: 01.04.2020

        Documentation: Initializes symbolic temperature increment of battery (sf * dx/dt = dx/ds)

        Inputs:
        sf: transformation factor dt/ds
        temp_cool_b: battery cooling liquid temperature [°C]
        """

        self.dtemp = \
            sf * ((self.p_loss_total * 1000 - self.r_batt_inverse * (self.temp_batt - temp_cool_b)) /
                  (self.pars["C_therm_cell"] * self.pars["N_cells_serial"] * self.pars["N_cells_parallel"]))

    def get_soc(self,
                sf: ca.SX):
        """
        Python version: 3.5
        Created by: Thomas Herrmann
        Created on: 01.04.2020

        Documentation: Initialize SOC increment of battery (sf * dx/dt = dx/ds)
        """

        self.dsoc = - sf * ((self.p_out_batt + self.p_loss_total) / 3600 / self.pars["C_batt"])

    def battery_loss(self,
                     p_des: ca.SX,
                     p_loss_inv: ca.SX,
                     p_loss_mot: ca.SX,
                     p_in_inv: ca.SX = None):
        """
        Python version: 3.5
        Created by: Thomas Herrmann
        Created on: 01.04.2020

        Documentation: Defines a battery loss model that was trained on measurement data based on Gaussian Processes

        Inputs:
        p_des: on wheels desired power [kW]
        p_loss_inv: inverter losses of all the inverters in the electric powertrain [kW]
        p_loss_mot: machine losses of all the electric machine in the electric powertrain [kW]
        p_in_inv: input power into a single inverter in the electric powertrain [kW]
        """

        if self.pars["simple_loss"]:

            p_in_inv *= self.pars["N_machines"]

            # Calculation of battery internal power using simple OCV model with one resistance [W]
            p_internal_batt = ((self.pars["V_OC_simple"] ** 2) / (2 * self.pars["R_i_simple"])) - \
                self.pars["V_OC_simple"] \
                * np.sqrt(
                (self.pars["V_OC_simple"] ** 2 - 4 * p_in_inv * 1000 * self.pars["R_i_simple"])) / \
                (2 * self.pars["R_i_simple"])

            # Transform to [kW]
            self.p_internal_batt = 0.001 * p_internal_batt

            # Battery loss [kW]
            self.p_loss_total = self.p_internal_batt - p_in_inv

            # Battery output [kW] = input in all inverters in the powertrain
            self.p_out_batt = p_in_inv

        else:

            # Output power battery [W]
            p_out_batt = (p_des + p_loss_inv + p_loss_mot) * 1000

            # Output current battery [A]
            self.i_batt = p_out_batt / self.v_dc

            ''' SUMO model
            # Battery output power normalized [W]
            p_out = (p_out_batt - 155000) / 155000

            # Battery SOC normalized [-]
            soc = (self.soc_batt - 5.000000e-01) / 5.000000e-01

            # Battery temperature normalized [°C]
            temp = (self.temp_batt - 34) / 16

            # Battery internal loss [W]
            p_loss = 5669.55730729093920672312378883+5527.77697861004617152502760291*(0.585047645827296070031309227488+- 18.2362538060064274247906723758 *(1+np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - -0.363982775219278908984676945693)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - -0.0964600738849384770068340344551)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - -1.17938541944701835717523863423)**2))) * np.exp(-np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - -0.363982775219278908984676945693)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - -0.0964600738849384770068340344551)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - -1.17938541944701835717523863423)**2))) - 7.19997599561028156500697150477 *(1+np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - 0.705241332913115193115061174467)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - -0.66459608179303286679129314507)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - -0.682796647053398597648765644408)**2))) * np.exp(-np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - 0.705241332913115193115061174467)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - -0.66459608179303286679129314507)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - -0.682796647053398597648765644408)**2)))  + 13.0934806786680386636589901173 *(1+np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - -1.28034522741492873265656271542)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - -2.23522819735585898115459713154)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - 0.592118884498381237158071144222)**2))) * np.exp(-np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - -1.28034522741492873265656271542)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - -2.23522819735585898115459713154)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - 0.592118884498381237158071144222)**2))) - 33.5939227328272380646012607031 *(1+np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - -0.211345461835272002693031367926)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.519469692708437902339824177034)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - -1.26617856769649650416909025807)**2))) * np.exp(-np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - -0.211345461835272002693031367926)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.519469692708437902339824177034)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - -1.26617856769649650416909025807)**2)))  + 1.73379811002361305938279656402 *(1+np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - 0.857964765559220077228985701367)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.634301256722022532841265274328)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - -1.59084179606557007957690075273)**2))) * np.exp(-np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - 0.857964765559220077228985701367)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.634301256722022532841265274328)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - -1.59084179606557007957690075273)**2))) - 16.0373007342997908608595025726 *(1+np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - -1.127818151776517341389194371)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - -2.23557817270172431989294636878)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - 0.593969750189930811856697800977)**2))) * np.exp(-np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - -1.127818151776517341389194371)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - -2.23557817270172431989294636878)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - 0.593969750189930811856697800977)**2)))  + 10.3933196906599274456084458507 *(1+np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - -0.058519868063460087070914994456)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.387830202943488744349309627069)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - -0.0196274341860819961924633503259)**2))) * np.exp(-np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - -0.058519868063460087070914994456)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.387830202943488744349309627069)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - -0.0196274341860819961924633503259)**2)))  + 11.8708187979714701043576496886 *(1+np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - 1.01075672040795550010727765766)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - -0.67129815195828845819647767712)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - 0.408722674747239389514419372063)**2))) * np.exp(-np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - 1.01075672040795550010727765766)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - -0.67129815195828845819647767712)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - 0.408722674747239389514419372063)**2)))  + 1.71499242762379866533706262999 *(1+np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - -0.975015730111822631620555057452)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.0697588229661438991024979827671)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - -0.211457301893179572260805798578)**2))) * np.exp(-np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - -0.975015730111822631620555057452)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.0697588229661438991024979827671)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - -0.211457301893179572260805798578)**2))) - 14.949627501764787496085773455 *(1+np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - 0.0942769585871709586699651595154)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.743715896652606511807448441687)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - 0.147308712937144981047765668336)**2))) * np.exp(-np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - 0.0942769585871709586699651595154)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.743715896652606511807448441687)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - 0.147308712937144981047765668336)**2)))  + 7.09513619346037494040047022281 *(1+np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - 1.16351926845719333414308493957)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - -0.219114283129669101812808662544)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - -0.174765859069107853951408060311)**2))) * np.exp(-np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - 1.16351926845719333414308493957)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - -0.219114283129669101812808662544)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - -0.174765859069107853951408060311)**2)))  + 4.12156908939852595352704156539 *(1+np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - -0.822222334607370042292018297303)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - -0.450546926056893892731380901751)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - 1.12803664028909622629726072773)**2))) * np.exp(-np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - -0.822222334607370042292018297303)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - -0.450546926056893892731380901751)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - 1.12803664028909622629726072773)**2)))  + 5.94090072022936599438480698154 *(1+np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - 0.247022799349043808980752601201)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - -0.591349372463725209136953253619)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - 1.50660264671308596895471509924)**2))) * np.exp(-np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - 0.247022799349043808980752601201)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - -0.591349372463725209136953253619)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - 1.50660264671308596895471509924)**2)))  + 118.526173869445898390040383674 *(1+np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - 1.31651169997953876311669318966)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.755040871415428527235746969382)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - 0.621771726210458619554799497564)**2))) * np.exp(-np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - 1.31651169997953876311669318966)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.755040871415428527235746969382)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - 0.621771726210458619554799497564)**2))) - 10.437227562998927510307112243 *(1+np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - -0.669472672146126712711122763722)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - -1.10100119556520881225480934518)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - 0.744158282708665130833480816364)**2))) * np.exp(-np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - -0.669472672146126712711122763722)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - -1.10100119556520881225480934518)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - 0.744158282708665130833480816364)**2))) - 3.95101391690014347446435749589 *(1+np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - 0.399782569825575806454764915543)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - -1.82882221136688394302893811982)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - 1.82829220146813176128830491507)**2))) * np.exp(-np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - 0.399782569825575806454764915543)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - -1.82882221136688394302893811982)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - 1.82829220146813176128830491507)**2))) - 651.798393285681868292158469558 *(1+np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - 1.42397010781555466429892931046)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.948604912138419353873075579031)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - 0.229722035035967914184951155221)**2))) * np.exp(-np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - 1.42397010781555466429892931046)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.948604912138419353873075579031)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - 0.229722035035967914184951155221)**2)))  + 19.6938277772023724310201941989 *(1+np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - -0.5167264188754615572563011483)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - -1.49190943638089534850621475925)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - 1.30822323976940446677019735944)**2))) * np.exp(-np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - -0.5167264188754615572563011483)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - -1.49190943638089534850621475925)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - 1.30822323976940446677019735944)**2)))  + 0.86388895230179840734052731932 *(1+np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - -1.40282779039273552967870273278)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.947318955429500064724379626568)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - 0.668717872112578493037915450259)**2))) * np.exp(-np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - -1.40282779039273552967870273278)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.947318955429500064724379626568)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - 0.668717872112578493037915450259)**2))) - 11.8160385361477153765008552 *(1+np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - -1.40282883851856476908892545907)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.947318955429500064724379626568)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - -1.64690606973445419214385765372)**2))) * np.exp(-np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - -1.40282883851856476908892545907)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.947318955429500064724379626568)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - -1.64690606973445419214385765372)**2)))  + 12.9490742255522501835685034166 *(1+np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - -1.40282867856123161232062557247)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.947318955429500064724379626568)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - -1.41545322229351455689538852312)**2))) * np.exp(-np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - -1.40282867856123161232062557247)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.947318955429500064724379626568)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - -1.41545322229351455689538852312)**2)))  + 205.056763246709266468315036036 *(1+np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - 1.42264495567770055117762240116)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.948604912138419353873075579031)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - -0.00324903124177772792760543474344)**2))) * np.exp(-np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - 1.42264495567770055117762240116)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.948604912138419353873075579031)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - -0.00324903124177772792760543474344)**2)))  + 135.919903547677790811576414853 *(1+np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - 1.42189570969636003283653735707)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.948604912138419353873075579031)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - 0.463407742141401846058812452611)**2))) * np.exp(-np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - 1.42189570969636003283653735707)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.948604912138419353873075579031)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - 0.463407742141401846058812452611)**2)))  + 58.6226660582020926426594087388 *(1+np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - 1.42035525209848767502762711956)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.948604912138419353873075579031)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - -0.236104273248531004725236925879)**2))) * np.exp(-np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - 1.42035525209848767502762711956)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.948604912138419353873075579031)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - -0.236104273248531004725236925879)**2)))  + 21.7716399607632880019991716836 *(1+np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - 1.41982131157717494929215718003)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.948604912138419353873075579031)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - 0.697093449246824259368793264002)**2))) * np.exp(-np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - 1.41982131157717494929215718003)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.948604912138419353873075579031)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - 0.697093449246824259368793264002)**2)))  + 1.5370913455758632437664346071 *(1+np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - -0.18406530023944028817695084399)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.161721714395543419984235811171)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - -0.955417324695364889031168331712)**2))) * np.exp(-np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - -0.18406530023944028817695084399)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.161721714395543419984235811171)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - -0.955417324695364889031168331712)**2)))  + 0.266866051358841060991977656158 *(1+np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - -1.40282851860389823350772076083)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.947318955429500064724379626568)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - -1.18400037485256337532746329089)**2))) * np.exp(-np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - -1.40282851860389823350772076083)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.947318955429500064724379626568)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - -1.18400037485256337532746329089)**2)))  + 9.17841255003762235276099090697 *(1+np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - -0.164642311537668201149031688146)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - -1.85286998116114332013637522323)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - 1.15838764313808328942911884951)**2))) * np.exp(-np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - -0.164642311537668201149031688146)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - -1.85286998116114332013637522323)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - 1.15838764313808328942911884951)**2))) - 22.350688669140588160644256277 *(1+np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - -0.310453144738378539191359095639)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - -1.68873696479263668557280198002)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - 1.70617896064157070767919321952)**2))) * np.exp(-np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - -0.310453144738378539191359095639)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - -1.68873696479263668557280198002)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - 1.70617896064157070767919321952)**2))) - 5.00620777151714779762414764264 *(1+np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - -0.835330084713103993010463454993)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.816138185483225142569096988154)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - -1.06767384648675389691163672978)**2))) * np.exp(-np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - -0.835330084713103993010463454993)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.816138185483225142569096988154)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - -1.06767384648675389691163672978)**2)))  + 5.00343655749712379332549971878 *(1+np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - 0.431860418872099749432180715303)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.348695619964123959544366471164)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - -0.660803587155745275616425260523)**2))) * np.exp(-np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - 0.431860418872099749432180715303)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.348695619964123959544366471164)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - -0.660803587155745275616425260523)**2))) - 371.098825585240376767615089193 *(1+np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - 1.29374132013677800578932419739)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.592685738612152679394284859882)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - 0.518522690290727839013129596424)**2))) * np.exp(-np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - 1.29374132013677800578932419739)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.592685738612152679394284859882)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - 0.518522690290727839013129596424)**2)))  + 52.6491515650927226488420274109 *(1+np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - -0.281612824275763173886844015215)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.422587613506522630224537806498)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - -1.1818124569048495953182964513)**2))) * np.exp(-np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - -0.281612824275763173886844015215)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.422587613506522630224537806498)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - -1.1818124569048495953182964513)**2)))  + 1.43302506231411408421649866796 *(1+np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - -1.32127504593861089254858143249)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - -0.384082034656718696030708315448)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - -0.934787322346289917263106872269)**2))) * np.exp(-np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - -1.32127504593861089254858143249)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - -0.384082034656718696030708315448)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - -0.934787322346289917263106872269)**2))) - 6.42794207321478605621223323396 *(1+np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - 0.39415670147301495873648491397)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.902368165242232844747150011244)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - -1.60187345732324137870250524429)**2))) * np.exp(-np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - 0.39415670147301495873648491397)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.902368165242232844747150011244)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - -1.60187345732324137870250524429)**2))) - 2.37224809067724073941008100519 *(1+np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - -1.25995042290939940343719172233)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.232833430301653654392879388979)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - 1.2732432026498379240564418069)**2))) * np.exp(-np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - -1.25995042290939940343719172233)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.232833430301653654392879388979)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - 1.2732432026498379240564418069)**2))) - 4.09419888038575408018004964106 *(1+np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - 0.430929352727867032157860194275)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.316223859424010711460795164385)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - 0.497119157869282290995727180416)**2))) * np.exp(-np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - 0.430929352727867032157860194275)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.316223859424010711460795164385)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - 0.497119157869282290995727180416)**2))) - 0.211728772875712512036017187711 *(1+np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - -0.825947046806616902436815053079)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - -0.645388378175157928495764281251)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - -0.492637406530931354353697315673)**2))) * np.exp(-np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - -0.825947046806616902436815053079)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - -0.645388378175157928495764281251)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - -0.492637406530931354353697315673)**2)))  + 480.145657437522629606974078342 *(1+np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - 1.36558740213179974354318346741)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.721310008695088877850309927453)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - 0.414173885567057975531923830204)**2))) * np.exp(-np.sqrt(3*(+ 0.0541656384821309760946306255391 * (((p_out--0.0123204504020006499337425154295) / 0.689108453669391551876799439924) - 1.36558740213179974354318346741)**2+ 0.0100000000000000002081668171172 * (((soc-0.401353893462628508181921915821) / 0.610994678765169663137157840538) - 0.721310008695088877850309927453)**2+ 0.0135110986496899398989768315005 * (((temp--0.0335675510620458486532591280138) / 0.539376453243244680102463917137) - 0.414173885567057975531923830204)**2))))
            '''

            # Calculation of battery internal power using simple OCV model with one resistance [W]
            p_internal_batt = ((self.v_dc ** 2) / (2 * self.Ri)) - \
                self.v_dc \
                * np.sqrt((self.v_dc ** 2 - 4 * p_out_batt * self.Ri)) / \
                (2 * self.Ri)

            # p_loss [W]
            p_loss = p_internal_batt - p_out_batt

            # Transform to [kW]
            self.p_loss_total = 0.001 * p_loss
            self.p_out_batt = 0.001 * p_out_batt

    def ocv_voltage(self):
        """
        Python version: 3.5
        Created by: Thomas Herrmann
        Created on: 01.04.2020

        Documentation: Outputs the battery Open Circuit Voltage as a 3rd order polynom
        """

        # OCV on battery terminals [V]
        self.v_dc = self.pars["N_cells_serial"] * \
            (1.245 * self.soc_batt ** 3 - 1.679 * self.soc_batt ** 2 + 1.064 * self.soc_batt + 3.566)

    def internal_resistance(self):
        """
        Python version: 3.5
        Created by: Thomas Herrmann
        Created on: 01.04.2020

        Inputs:
        temp_batt_sym: symbolic description of battery temperature (can be battery.temp_batt (for use of ES in
        combination with ACADOS) or .temp_batt_n (for use with only CasADi and IPOPT))

        Documentation: Outputs the battery internal resistance temperature dependently
        """

        # Ri(T) [Ohm]
        self.Ri = self.pars["N_cells_serial"] / self.pars["N_cells_parallel"] \
            * (self.pars["R_i_offset"] - self.pars["R_i_slope"] * self.temp_batt)

    def get_thermal_resistance(self):
        """
        Python version: 3.5
        Created by: Thomas Herrmann
        Created on: 01.04.2020

        Documentation: Calculates thermal resistance of battery to be used within a lumped description
        """

        # Thermal resistance inverse [K/W]
        self.r_batt_inverse = 1 / 0.002

    def ini_nlp_state(self,
                      x: ca.SX,
                      u: ca.SX):
        """
        Python version: 3.5
        Created by: Thomas Herrmann
        Created on: 01.04.2020

        Documentation: Defines function to define battery states in NLP

        Inputs:
        x: discrete NLP state
        u: discrete NLP control input
        """

        if self.pars["simple_loss"]:
            self.f_nlp = \
                ca.Function('f_nlp',
                            [x, u], [self.p_loss_total, self.p_out_batt],
                            ['x', 'u'], ['p_loss_total', 'p_out_batt'])
        else:
            self.f_nlp = \
                ca.Function('f_nlp',
                            [x, u], [self.p_loss_total, self.p_out_batt],
                            ['x', 'u'], ['p_loss_total', 'p_out_batt'])

    def extract_sol(self,
                    w: ca.SX,
                    sol_states: ca.DM):
        """
        Python version: 3.5
        Created by: Thomas Herrmann
        Created on: 01.04.2020

        Documentation: Defines function to retrieve values of optimized NLP battery states

        Inputs:
        w: discrete optimized NLP decision variables (x and u)
        sol_states: numeric values belonging to the symbolic NLP decision variables w
        """

        if self.pars["simple_loss"]:
            self.f_sol = \
                ca.Function('f_sol',
                            [w], [self.p_losses_opt],
                            ['w'], ['p_losses_opt'])

            # Overwrite lists with optimized numeric values
            p_losses_opt = self.f_sol(sol_states)

            self.p_loss_total = p_losses_opt[0::2]
            self.p_out_batt = p_losses_opt[1::2]

        else:
            self.f_sol = \
                ca.Function('f_sol',
                            [w], [self.p_losses_opt],
                            ['w'], ['p_losses_opt'])

            # Overwrite lists with optimized numeric values
            p_losses_opt = self.f_sol(sol_states)

            self.p_loss_total = p_losses_opt[0::2]
            self.p_out_batt = p_losses_opt[1::2]


if __name__ == "__main__":
    pass
