# ----------------------------------------------------------------------------------------------------------------------
[GENERAL_OPTIONS]

### set name of ggv diagram and ax_max_machines files to use
ggv_file="ggv.csv"
ax_max_machines_file="ax_max_machines.csv"

### stepsize options
# stepsize_prep:               [m] used for linear interpolation before spline approximation
# stepsize_reg:                [m] used for spline interpolation after spline approximation (stepsize during opt.)
# stepsize_interp_after_opt:   [m] used for spline interpolation after optimization

stepsize_opts={"stepsize_prep": 1.0,
               "stepsize_reg": 3.0,
               "stepsize_interp_after_opt": 2.0}

### spline regression smooth options
# k_reg:                        [-] order of B-Splines -> standard: 3
# s_reg:                        [-] smoothing factor, range [1.0, 100.0]

reg_smooth_opts={"k_reg": 3,
                 "s_reg": 10}

### preview and review distances for numerical curvature calculation (used in minimum time optimization)
# d_preview_curv:               [m] preview distance (curvature)
# d_review_curv:                [m] review distance (curvature)
# d_preview_head:               [m] preview distance (heading)
# d_review_head:                [m] review distance (heading)

curv_calc_opts = {"d_preview_curv": 2.0,
                  "d_review_curv": 2.0,
                  "d_preview_head": 1.0,
                  "d_review_head": 1.0}

### general vehicle parameters required in several functions
# v_max:                        [m/s] maximal vehicle speed
# length:                       [m] vehicle length
# width:                        [m] vehicle width
# mass:                         [kg] vehicle mass
# dragcoeff:                    [kg*m2/m3] drag coefficient calculated by 0.5 * rho_air * c_w * A_front
# curvlim:                      [rad/m] curvature limit of the vehicle
# g:                            [N/kg] gravity acceleration

veh_params = {"v_max": 70.0,
              "length": 4.7,
              "width": 2.0,
              "mass": 1200.0,
              "dragcoeff": 0.75,
              "curvlim": 0.12,
              "g": 9.81}

### velocity profile calculation options
# dyn_model_exp:                [-] exponent used in the vehicle dynamics model (range [1.0, 2.0])
# vel_profile_conv_filt_window: [-] moving average filter window size for velocity profile (set null if not used)

vel_calc_opts = {"dyn_model_exp": 1.0,
                 "vel_profile_conv_filt_window": null}

# ----------------------------------------------------------------------------------------------------------------------
[OPTIMIZATION_OPTIONS]

### optimization problem options (shortest path optimization) ----------------------------------------------------------
# width_opt:                    [m] vehicle width for optimization including safety distance

optim_opts_shortest_path={"width_opt": 3.4}

### optimization problem options (minimum curvature optimization) ------------------------------------------------------
# width_opt:                    [m] vehicle width for optimization including safety distance
# iqp_iters_min:                [-] minimum number of iterations for the IQP
# iqp_curverror_allowed:        [rad/m] maximum allowed curvature error for the IQP

optim_opts_mincurv={"width_opt": 3.4,
                    "iqp_iters_min": 3,
                    "iqp_curverror_allowed": 0.01}

### optimization problem options (minimum lap time optimization) -------------------------------------------------------
# width_opt:                    [m] vehicle width for optimization including safety distance
# penalty_delta:                [-] penalty of delta derivative for improved smoothness of controls (range [0.0, 50.0])
# penalty_F:                    [-] penalty of F derivative for improved smoothness of controls (range [0.0, 2.0])
# mue:                          [-] constant friction coefficient (determines tire's D parameter of MF by D = F_z * mue)
# n_gauss                       [-] number of gaussian basis functions on each side (var_friction: "gauss")
# dn                            [m] distance of equidistant points on normal vectors for extracting friction
                                # coefficients (var_friction: "linear" or "gauss")
# limit_energy:                 [true/false] limit energy consumption
# energy_limit:                 [kWh/lap] energy consumption limit (limit_energy: true)
# safe_traj:                    [true/false] safe trajectories -> limit accelerations
# ax_pos_safe:                  [m/s2] a_x+ limit for safe trajectories (safe_traj: true) -> null if ggv should be used
# ax_neg_safe:                  [m/s2] a_x- limit for safe trajectories (safe_traj: true) -> null if ggv should be used
# ay_safe:                      [m/s2] a_y limit for safe trajectories (safe_traj: true) -> null if ggv should be used
# w_tr_reopt:                   [m] total track width in case of reoptimization using the IQP
# w_veh_reopt:                  [m] vehicle width in case of reoptimization using the IQP
# w_add_spl_regr:               [m] width added in case of reoptimization to compensate second spline regression
# step_non_reg:                 [-] defines how many points to be skipped per step during non-regular point sampling
#                               (dependent on curvature)
# eps_kappa:                    [rad/m] curvature threshold to skip discretization points on straights (if
#                               step_non_reg > 0)

optim_opts_mintime={"width_opt": 3.4,
                    "penalty_delta": 10.0,
                    "penalty_F": 0.01,
                    "mue": 1.0,
                    "n_gauss": 5,
                    "dn": 0.25,
                    "limit_energy": false,
                    "energy_limit": 2.0,
                    "safe_traj": false,
                    "ax_pos_safe": null,
                    "ax_neg_safe": null,
                    "ay_safe": null,
                    "w_tr_reopt": 2.0,
                    "w_veh_reopt": 1.6,
                    "w_add_spl_regr": 0.2,
                    "step_non_reg": 0,
                    "eps_kappa": 1e-3}

### vehicle parameters (minimum lap time optimization)
# wheelbase_front:              [m] wheelbase front
# wheelbase_rear:               [m] wheelbase rear
# track_width_front:            [m] track width front
# track_width_rear:             [m] track width rear
# cog_z:                        [m] center of gravity
# I_z:                          [kgm^2] yaw inertia
# liftcoeff_front:              [kg*m2/m3] lift coefficient front axle calculated by 0.5 * rho_air * c_l_f * A_spoiler_f
# liftcoeff_rear:               [kg*m2/m3] lift coefficient rear axle calculated by 0.5 * rho_air * c_l_r * A_spoiler_r
# k_brake_front:                [-] portion of braking force at the front axle of the total braking force
# k_drive_front:                [-] portion of driving force at the front axle of the total driving force
# k_roll:                       [-] portion of roll moment at the front axle of the total roll moment
# t_delta:                      [s] time constant for steering dynamic
# t_drive:                      [s] time constant for acceleration dynamic
# t_brake:                      [s] time constant for braking dynamic
# power_max:                    [W] maximal engine power
# f_drive_max:                  [N] maximal drive force
# f_brake_max:                  [N] maximal brake force (only needed for actor dynamics)
# delta_max:                    [rad] maximal steer angle

vehicle_params_mintime = {"wheelbase_front": 1.6,
                          "wheelbase_rear": 1.4,
                          "track_width_front": 1.6,
                          "track_width_rear": 1.6,
                          "cog_z": 0.38,
                          "I_z": 1200.0,
                          "liftcoeff_front": 0.45,
                          "liftcoeff_rear": 0.75,
                          "k_brake_front": 0.6,
                          "k_drive_front": 0.0,
                          "k_roll": 0.5,
                          "t_delta": 0.2,
                          "t_drive": 0.05,
                          "t_brake": 0.05,
                          "power_max": 230000.0,
                          "f_drive_max": 7000.0,
                          "f_brake_max": 20000.0,
                          "delta_max": 0.35}

### tire parameters (minimum lap time optimization)
# c_roll:                       [-] rolling resistance coefficient
# f_z0:                         [N] nominal normal force
# B_front:                      [-] Coefficient B for front tire
# C_front:                      [-] Coefficient C for front tire
# eps_front:                    [-] load dependence of Coefficient D for front tire
# E_front:                      [-] Coefficient E for front tire
# B_rear:                       [-] Coefficient B for rear tire
# C_rear:                       [-] Coefficient C for rear tire
# eps_rear:                     [-] load dependence of Coefficient D for rear tire
# E_rear:                       [-] Coefficient E for rear tire
# Hint: The D parameter of the Magic Formula is determined by D = F_z * mue. mue can be set above in optim_opts_mintime!

tire_params_mintime = {"c_roll": 0.013,
                       "f_z0": 3000.0,
                       "B_front": 10.0,
                       "C_front": 2.5,
                       "eps_front": -0.1,
                       "E_front": 1.0,
                       "B_rear": 10.0,
                       "C_rear": 2.5,
                       "eps_rear": -0.1,
                       "E_rear": 1.0}

### powertrain behavior (minimum lap time optimization)
# [1] Prof. Dr.-Ing. Markus Lienkamp, „Auslegung von Elektrofahrzeugen: Lecture slides,“ Unpublished manuscript, 2018
# [2] F. P. Incropera, Fundamentals of heat and mass transfer, 6th ed., Hoboken NJ, John Wiley, 2007, ISBN: 9780471457282
# [3] M. Grabowski, K. Urbaniec, J. Wernik and K. J. Wołosz, „Numerical simulation and experimental verification of heat transfer from a finned housing of an electric motor,“Energy Conversion and Management, vol. 125, pp. 91–96, 2016
# [4] K. Li, S. Wang and J. P. Sullivan, „A novel thermal network for the maximum temperaturerise of hollow cylinder,“ Applied Thermal Engineering, vol. 52, no. 1, pp. 198–208, 2013

# pwr_behavior:                 [-] consider powertrain behavior
# simple_loss:                  [-] use simple loss models (fitted to measured data, input -- ouput power)
# T_env:                        [°C] temperature of environment
# T_mot_ini:                    [°C] initial temperature electric machines
# T_batt_ini:                   [°C] initial temperature battery
# T_inv_ini:                    [°C] initial temperature inverter
# T_cool_mi_ini:                [°C] initial temperature cooling fluid machine and inverter
# T_cool_b_ini:                 [°C] initial temperature battery fluid
# r_wheel:                      [m] Wheel radius
# R_i_sumo:                     [Ohm] internal resistance of battery (SUMO model fit)
# R_i_simple:                   [Ohm] internal resistance of simple battery model
# R_i_offset:                   [Ohm] single cell resistance, offset in temperature dependency
# R_i_slope :                   [Ohm/°C] single cell resistance, slope in temperature dependency
# V_OC_simple:                  [V] Open Circuit Voltage of simple battery model
# SOC_ini:                      [-] initial SOC of battery
# C_batt:                       [kWh] Capacity of battery (spreadsheet)
# N_cells_serial:               [-] Number of battery cells in series in battery pack
# N_cells_parallel:             [-] Number of battery cells in parallel in battery pack
# temp_mot_max:                 [°C] max. allowed temperature of electric machines (spreadsheet)
# temp_batt_max:                [°C] max. allowed temperature of battery (spreadsheet)
# temp_inv_max:                 [°C] max. allowed temperature of inverters [1, p 7.19]
# N_machines:                   [-] number of electric machines (spreadsheet)
# transmission:                 [-] gear transmission
# MotorConstant:                [Nm/A] motor constant (linear dependency current and torque)
# C_therm_machine:              [J/K] Absolute thermal capacity electric machine
                                # c_iro = 420 J/kgK; c_magnet = 460 J/kgK; m_machine = 18 kg (spreadsheet)
                                # -> C_therm_machine = 99 % * m_machine * c_iro + 1 % * m_machine * c_magnet
# C_therm_inv:                  [J/K] Absolute thermal capacity inverter (equal to that of motor)
# C_therm_cell:                 [J/K] Absolute thermal capacity battery pouch cell
# C_TempCopper:                 [1/°C] temperature coefficient copper in electric machine
# m_therm_fluid_mi              [kg] mass of cooling fluid (machine inverter circuit)
# m_therm_fluid_b               [kg] mass of cooling fluid (battery circuit)
# R_Phase:                      [kOhm] phase resistance electric machine
# r_rotor_int:                  [m] radius rotor internal (spreadsheet)
# r_rotor_ext:                  [m] radius rotor external (spreadsheet)
# r_stator_int:                 [m] radius stator internal (spreadsheet)
# r_stator_ext:                 [m] radius stator external (spreadsheet)
# l_machine:                    [m] length electric machine (spreadsheet)
# A_cool_inflate_machine:       [-] factor of which cooling surface of machine is bigger than raw outer surface
# A_cool_inv:                   [m^2] cooling area of inverter: length * width
# A_cool_rad:                   [m^2] cooling area of radiator [2, p 704]
# k_iro:                        [W/m^2K] thermal conductivity of iron [3]
# h_air:                        [W/m^2K] convective heat flux coefficient of radiator to air [1, p 9.95]
# h_air_gap:                    [W/m^2K] convective heat flux coefficient of machine air gap [4]
# h_fluid_mi:                   [W/m^2K] convective heat flux coefficient of cooling fluid machine + inverter [1, p 9.95]
# c_heat_fluid                  [J/kgK] specific heat capacity cooling fluid (similar to water) [2]
# flow_rate_inv                 [kg/s] flow rate of cooling fluid through inverters
# flow_rate_rad                 [kg/s] flow rate of cooling fluid through radiator (estimated from spreadsheet)
# machine_simple_a,b,c:         [-] fitting coefficients (ax^2 + bx + c) of machine efficiency (input -- output power)
# V_ref:                        [V] reference voltage inverter
# I_ref:                        [A] reference current inverter
# V_ce_offset:                  [V] current dependent Collector-Emitter voltage IGBT 'SKim459GD12E4' (linear dependency)
# V_ce_slope:                   [V] current dependent Collector-Emitter voltage IGBT 'SKim459GD12E4' (linear dependency)
# E_on:                         [J] loss energy switching ON IGBT-bridge 'SKim459GD12E4', value for bridge (2 IGBTS)
# E_off:                        [J] loss energy switching OFF IGBT-bridge 'SKim459GD12E4', value for bridge (2 IGBTS)
# E_rr:                         [J] loss energy reverse recovery IGBT-bridge 'SKim459GD12E4', value for bridge (2 IGBTS)
# f_sw:                         [Hz] constantly assumed inverter frequency
# inverter_fit_a,b,c            [-] fitting coefficients (ax^2 + bx + c) of inverter efficiency (input -- output power)

pwr_params_mintime = {"pwr_behavior": false,
                      "simple_loss": true,
                      "T_env": 30,
                      "T_mot_ini": 30,
                      "T_batt_ini": 30,
                      "T_inv_ini": 30,
                      "T_cool_mi_ini": 30,
                      "T_cool_b_ini": 30,
                      "r_wheel": 0.3,
                      "R_i_sumo": 0.001,
                      "R_i_simple": 0.125,
                      "R_i_offset": 0.0013871,
                      "R_i_slope": 7.5133e-6,
                      "V_OC_simple": 700,
                      "SOC_ini": 0.4,
                      "C_batt": 41.0,
                      "N_cells_serial": 176,
                      "N_cells_parallel": 3,
                      "temp_mot_max": 170.0,
                      "temp_batt_max": 50.0,
                      "temp_inv_max": 100.0,
                      "N_machines": 2,
                      "transmission": 6.25,
                      "MotorConstant": 0.465,
                      "C_therm_machine": 7567.2,
                      "C_therm_inv": 7567.2,
                      "C_therm_cell": 824.0,
                      "C_TempCopper": 0.004041,
                      "m_therm_fluid_mi": 5,
                      "m_therm_fluid_b": 5,
                      "R_Phase": 0.0105,
                      "r_rotor_int": 0.03,
                      "r_rotor_ext": 0.087,
                      "r_stator_int": 0.088,
                      "r_stator_ext": 0.121,
                      "l_machine": 0.055,
                      "A_cool_inflate_machine": 3.0,
                      "A_cool_inv": 0.3969,
                      "A_cool_rad": 5.0,
                      "k_iro": 45.0,
                      "h_air": 50.0,
                      "h_air_gap": 60.0,
                      "h_fluid_mi": 5000.0,
                      "c_heat_fluid": 4181.0,
                      "flow_rate_inv": 0.2,
                      "flow_rate_rad": 0.2,
                      "machine_simple_a": -0.000027510784764,
                      "machine_simple_b": 1.046187222759047,
                      "machine_simple_c": 1.001964003837042,
                      "V_ref": 600.0,
                      "I_ref": 450.0,
                      "V_ce_offset": 0.8,
                      "V_ce_slope": 0.0036,
                      "E_on": 0.022,
                      "E_off": 0.057,
                      "E_rr": 0.04,
                      "f_sw": 12000.0,
                      "inverter_simple_a": -0.000707138661579,
                      "inverter_simple_b": 1.139958410466637,
                      "inverter_simple_c": 1.004970807882952}
