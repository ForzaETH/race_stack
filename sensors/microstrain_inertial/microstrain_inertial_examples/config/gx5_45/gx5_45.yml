microstrain_inertial_driver:
  ros__parameters:
    # You should change this section of config to match your setup
    port : '/dev/microstrain_main'
    baudrate : 115200

    # You will need to update this measurement to be accurate to where your antenna is located.
    # Note that this measurement is in the microstrain vehicle frame.
    gnss1_antenna_offset : [0.0, -0.7, -1.0]

    # This will cause the node to convert any NED measurements to ENU
    # This will also cause the node to convert any vehicle frame measurements to the ROS definition of a vehicle frame
    use_enu_frame : True

    # Configure some frame IDs
    frame_id        : 'gx5_45_link'                 # Frame ID of all of the filter messages. Represents the location of the CV7-INS in the tf tree
    map_frame_id    : "map"                         # Frame ID of the local tangent plane.
    earth_frame_id  : "earth"                       # Frame ID of the global frame
    gnss1_frame_id  : "gx5_45_gnss_1_antenna_link"  # Frame ID for GNSS antenna 1
    target_frame_id : "base_link"                   # Frame ID that we will publish a transform to.

    # Disable the transform from the mount to frame id transform as it will be handled in the launch file
    publish_mount_to_frame_id_transform : False

    # We will use relative transform mode, meaning that we will publish the following transforms from this node
    #   earth_frame_id -> map_frame_id
    #   map_frame_id -> target_frame_id
    # This helps ROS standard tools consume and display position information produced by the device
    tf_mode: 2

    # We will use auto relative position configuration for this example. This configuration does a couple things:
    #   We will setup a local tangent plane at the first location we receive after the device enters full navigation mode
    #   We will publish this location as the transform from the earth_frame_id to map_frame_id frame
    filter_relative_position_config : True
    filter_relative_position_source : 2

    # This device only supports sending IMU data at 500 hertz
    imu_data_rate : 500

    # The default is to publish LLH position and velocity, but rviz has a hard time displaying that.
    # Instead we will publish the position in the ECEF frame
    gnss1_llh_position_data_rate   : 0
    gnss1_velocity_data_rate       : 0
    gnss1_odometry_earth_data_rate : 2
    
    # We will only publish the odometry messages from the filter in this example.
    # Also publish the human readable message which can be echoed from the command line
    filter_human_readable_status_data_rate : 1
    filter_odometry_earth_data_rate        : 10
    filter_odometry_map_data_rate          : 10