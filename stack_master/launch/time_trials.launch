<?xml version="1.0"?>
<launch>
    <arg name="racecar_version" default="NUC2"
        doc="Physical racecar used. Possible values: NUC2/NUC3/NUC4/NUC5" />
    <arg name="LU_table" default="NUC2_pacejka"
        doc="Name of the lookup table. Possible values: NUCX_hangar_pacejka / SIM_linear -->" />
    <arg name="ctrl_algo" default="MAP"
        doc="Control algorithm to use. Possible values: MAP/PP" />
    <arg name="measure" default="False"
        doc="Whether or not to measure latencies" />

    <param name="/measure" value="$(arg measure)" />

    <!-- CONTROLLER -->
    <node pkg="controller" name="controller_manager" type="controller_manager.py" output="screen">
        <param name="LU_table" value="$(arg LU_table)" />
        <param name="ctrl_algo" value="$(arg ctrl_algo)" />
    </node>
    <!-- launch dynamic reconfigure for controller manager -->
    <node pkg="controller" name="l1_param_tuner" type="l1_params_server.py" output="screen" />
    <rosparam ns="L1_controller" command="load"
        file="$(find stack_master)/config/$(arg racecar_version)/l1_params.yaml" />

    <!-- launch state machine with dynamic reconf -->
    <node pkg="state_machine" type="dynamic_statemachine_server.py"
        name="dynamic_statemachine_server" output="screen" />
    <node pkg="state_machine" type="state_machine_node.py" name="state_machine" output="screen">
        <rosparam file="$(find stack_master)/config/state_machine_params.yaml" />
    </node>

    <!-- launch cpu_monitor if measuring -->
    <group if="$(arg measure)">
        <node pkg="cpu_monitor" type="monitor.py" name="cpu_monitor" output="screen" />
    </group>
</launch>